// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 28.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `manifest.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:ContentManifestPayload)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ContentManifestPayload {
    // message fields
    // @@protoc_insertion_point(field:ContentManifestPayload.mappings)
    pub mappings: ::std::vec::Vec<content_manifest_payload::FileMapping>,
    // special fields
    // @@protoc_insertion_point(special_field:ContentManifestPayload.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ContentManifestPayload {
    fn default() -> &'a ContentManifestPayload {
        <ContentManifestPayload as ::protobuf::Message>::default_instance()
    }
}

impl ContentManifestPayload {
    pub fn new() -> ContentManifestPayload {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "mappings",
            |m: &ContentManifestPayload| { &m.mappings },
            |m: &mut ContentManifestPayload| { &mut m.mappings },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ContentManifestPayload>(
            "ContentManifestPayload",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ContentManifestPayload {
    const NAME: &'static str = "ContentManifestPayload";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.mappings.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.mappings {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.mappings {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ContentManifestPayload {
        ContentManifestPayload::new()
    }

    fn clear(&mut self) {
        self.mappings.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ContentManifestPayload {
        static instance: ContentManifestPayload = ContentManifestPayload {
            mappings: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ContentManifestPayload {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ContentManifestPayload").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ContentManifestPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContentManifestPayload {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ContentManifestPayload`
pub mod content_manifest_payload {
    // @@protoc_insertion_point(message:ContentManifestPayload.FileMapping)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct FileMapping {
        // message fields
        // @@protoc_insertion_point(field:ContentManifestPayload.FileMapping.filename)
        pub filename: ::std::string::String,
        // @@protoc_insertion_point(field:ContentManifestPayload.FileMapping.size)
        pub size: u64,
        // @@protoc_insertion_point(field:ContentManifestPayload.FileMapping.flags)
        pub flags: u32,
        // @@protoc_insertion_point(field:ContentManifestPayload.FileMapping.sha_filename)
        pub sha_filename: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:ContentManifestPayload.FileMapping.sha_content)
        pub sha_content: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:ContentManifestPayload.FileMapping.chunks)
        pub chunks: ::std::vec::Vec<file_mapping::ChunkData>,
        // @@protoc_insertion_point(field:ContentManifestPayload.FileMapping.linktarget)
        pub linktarget: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:ContentManifestPayload.FileMapping.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a FileMapping {
        fn default() -> &'a FileMapping {
            <FileMapping as ::protobuf::Message>::default_instance()
        }
    }

    impl FileMapping {
        pub fn new() -> FileMapping {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(7);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "filename",
                |m: &FileMapping| { &m.filename },
                |m: &mut FileMapping| { &mut m.filename },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "size",
                |m: &FileMapping| { &m.size },
                |m: &mut FileMapping| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "flags",
                |m: &FileMapping| { &m.flags },
                |m: &mut FileMapping| { &mut m.flags },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "sha_filename",
                |m: &FileMapping| { &m.sha_filename },
                |m: &mut FileMapping| { &mut m.sha_filename },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "sha_content",
                |m: &FileMapping| { &m.sha_content },
                |m: &mut FileMapping| { &mut m.sha_content },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "chunks",
                |m: &FileMapping| { &m.chunks },
                |m: &mut FileMapping| { &mut m.chunks },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "linktarget",
                |m: &FileMapping| { &m.linktarget },
                |m: &mut FileMapping| { &mut m.linktarget },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FileMapping>(
                "ContentManifestPayload.FileMapping",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for FileMapping {
        const NAME: &'static str = "FileMapping";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.filename = is.read_string()?;
                    },
                    16 => {
                        self.size = is.read_uint64()?;
                    },
                    24 => {
                        self.flags = is.read_uint32()?;
                    },
                    34 => {
                        self.sha_filename = is.read_bytes()?;
                    },
                    42 => {
                        self.sha_content = is.read_bytes()?;
                    },
                    50 => {
                        self.chunks.push(is.read_message()?);
                    },
                    58 => {
                        self.linktarget = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.filename.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.filename);
            }
            if self.size != 0 {
                my_size += ::protobuf::rt::uint64_size(2, self.size);
            }
            if self.flags != 0 {
                my_size += ::protobuf::rt::uint32_size(3, self.flags);
            }
            if !self.sha_filename.is_empty() {
                my_size += ::protobuf::rt::bytes_size(4, &self.sha_filename);
            }
            if !self.sha_content.is_empty() {
                my_size += ::protobuf::rt::bytes_size(5, &self.sha_content);
            }
            for value in &self.chunks {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            if !self.linktarget.is_empty() {
                my_size += ::protobuf::rt::string_size(7, &self.linktarget);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.filename.is_empty() {
                os.write_string(1, &self.filename)?;
            }
            if self.size != 0 {
                os.write_uint64(2, self.size)?;
            }
            if self.flags != 0 {
                os.write_uint32(3, self.flags)?;
            }
            if !self.sha_filename.is_empty() {
                os.write_bytes(4, &self.sha_filename)?;
            }
            if !self.sha_content.is_empty() {
                os.write_bytes(5, &self.sha_content)?;
            }
            for v in &self.chunks {
                ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
            };
            if !self.linktarget.is_empty() {
                os.write_string(7, &self.linktarget)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> FileMapping {
            FileMapping::new()
        }

        fn clear(&mut self) {
            self.filename.clear();
            self.size = 0;
            self.flags = 0;
            self.sha_filename.clear();
            self.sha_content.clear();
            self.chunks.clear();
            self.linktarget.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static FileMapping {
            static instance: FileMapping = FileMapping {
                filename: ::std::string::String::new(),
                size: 0,
                flags: 0,
                sha_filename: ::std::vec::Vec::new(),
                sha_content: ::std::vec::Vec::new(),
                chunks: ::std::vec::Vec::new(),
                linktarget: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for FileMapping {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ContentManifestPayload.FileMapping").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for FileMapping {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for FileMapping {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `FileMapping`
    pub mod file_mapping {
        // @@protoc_insertion_point(message:ContentManifestPayload.FileMapping.ChunkData)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct ChunkData {
            // message fields
            // @@protoc_insertion_point(field:ContentManifestPayload.FileMapping.ChunkData.sha)
            pub sha: ::std::vec::Vec<u8>,
            // @@protoc_insertion_point(field:ContentManifestPayload.FileMapping.ChunkData.crc)
            pub crc: u32,
            // @@protoc_insertion_point(field:ContentManifestPayload.FileMapping.ChunkData.offset)
            pub offset: u64,
            // @@protoc_insertion_point(field:ContentManifestPayload.FileMapping.ChunkData.cb_original)
            pub cb_original: u32,
            // @@protoc_insertion_point(field:ContentManifestPayload.FileMapping.ChunkData.cb_compressed)
            pub cb_compressed: u32,
            // special fields
            // @@protoc_insertion_point(special_field:ContentManifestPayload.FileMapping.ChunkData.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a ChunkData {
            fn default() -> &'a ChunkData {
                <ChunkData as ::protobuf::Message>::default_instance()
            }
        }

        impl ChunkData {
            pub fn new() -> ChunkData {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(5);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "sha",
                    |m: &ChunkData| { &m.sha },
                    |m: &mut ChunkData| { &mut m.sha },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "crc",
                    |m: &ChunkData| { &m.crc },
                    |m: &mut ChunkData| { &mut m.crc },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "offset",
                    |m: &ChunkData| { &m.offset },
                    |m: &mut ChunkData| { &mut m.offset },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "cb_original",
                    |m: &ChunkData| { &m.cb_original },
                    |m: &mut ChunkData| { &mut m.cb_original },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "cb_compressed",
                    |m: &ChunkData| { &m.cb_compressed },
                    |m: &mut ChunkData| { &mut m.cb_compressed },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChunkData>(
                    "ContentManifestPayload.FileMapping.ChunkData",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for ChunkData {
            const NAME: &'static str = "ChunkData";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.sha = is.read_bytes()?;
                        },
                        16 => {
                            self.crc = is.read_uint32()?;
                        },
                        24 => {
                            self.offset = is.read_uint64()?;
                        },
                        32 => {
                            self.cb_original = is.read_uint32()?;
                        },
                        40 => {
                            self.cb_compressed = is.read_uint32()?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if !self.sha.is_empty() {
                    my_size += ::protobuf::rt::bytes_size(1, &self.sha);
                }
                if self.crc != 0 {
                    my_size += ::protobuf::rt::uint32_size(2, self.crc);
                }
                if self.offset != 0 {
                    my_size += ::protobuf::rt::uint64_size(3, self.offset);
                }
                if self.cb_original != 0 {
                    my_size += ::protobuf::rt::uint32_size(4, self.cb_original);
                }
                if self.cb_compressed != 0 {
                    my_size += ::protobuf::rt::uint32_size(5, self.cb_compressed);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if !self.sha.is_empty() {
                    os.write_bytes(1, &self.sha)?;
                }
                if self.crc != 0 {
                    os.write_uint32(2, self.crc)?;
                }
                if self.offset != 0 {
                    os.write_uint64(3, self.offset)?;
                }
                if self.cb_original != 0 {
                    os.write_uint32(4, self.cb_original)?;
                }
                if self.cb_compressed != 0 {
                    os.write_uint32(5, self.cb_compressed)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> ChunkData {
                ChunkData::new()
            }

            fn clear(&mut self) {
                self.sha.clear();
                self.crc = 0;
                self.offset = 0;
                self.cb_original = 0;
                self.cb_compressed = 0;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static ChunkData {
                static instance: ChunkData = ChunkData {
                    sha: ::std::vec::Vec::new(),
                    crc: 0,
                    offset: 0,
                    cb_original: 0,
                    cb_compressed: 0,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for ChunkData {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("ContentManifestPayload.FileMapping.ChunkData").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for ChunkData {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for ChunkData {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }
}

// @@protoc_insertion_point(message:ContentManifestMetadata)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ContentManifestMetadata {
    // message fields
    // @@protoc_insertion_point(field:ContentManifestMetadata.depot_id)
    pub depot_id: u32,
    // @@protoc_insertion_point(field:ContentManifestMetadata.gid_manifest)
    pub gid_manifest: u64,
    // @@protoc_insertion_point(field:ContentManifestMetadata.creation_time)
    pub creation_time: u32,
    // @@protoc_insertion_point(field:ContentManifestMetadata.filenames_encrypted)
    pub filenames_encrypted: bool,
    // @@protoc_insertion_point(field:ContentManifestMetadata.cb_disk_original)
    pub cb_disk_original: u64,
    // @@protoc_insertion_point(field:ContentManifestMetadata.cb_disk_compressed)
    pub cb_disk_compressed: u64,
    // @@protoc_insertion_point(field:ContentManifestMetadata.unique_chunks)
    pub unique_chunks: u32,
    // @@protoc_insertion_point(field:ContentManifestMetadata.crc_encrypted)
    pub crc_encrypted: u32,
    // @@protoc_insertion_point(field:ContentManifestMetadata.crc_clear)
    pub crc_clear: u32,
    // special fields
    // @@protoc_insertion_point(special_field:ContentManifestMetadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ContentManifestMetadata {
    fn default() -> &'a ContentManifestMetadata {
        <ContentManifestMetadata as ::protobuf::Message>::default_instance()
    }
}

impl ContentManifestMetadata {
    pub fn new() -> ContentManifestMetadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "depot_id",
            |m: &ContentManifestMetadata| { &m.depot_id },
            |m: &mut ContentManifestMetadata| { &mut m.depot_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gid_manifest",
            |m: &ContentManifestMetadata| { &m.gid_manifest },
            |m: &mut ContentManifestMetadata| { &mut m.gid_manifest },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "creation_time",
            |m: &ContentManifestMetadata| { &m.creation_time },
            |m: &mut ContentManifestMetadata| { &mut m.creation_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "filenames_encrypted",
            |m: &ContentManifestMetadata| { &m.filenames_encrypted },
            |m: &mut ContentManifestMetadata| { &mut m.filenames_encrypted },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cb_disk_original",
            |m: &ContentManifestMetadata| { &m.cb_disk_original },
            |m: &mut ContentManifestMetadata| { &mut m.cb_disk_original },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cb_disk_compressed",
            |m: &ContentManifestMetadata| { &m.cb_disk_compressed },
            |m: &mut ContentManifestMetadata| { &mut m.cb_disk_compressed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "unique_chunks",
            |m: &ContentManifestMetadata| { &m.unique_chunks },
            |m: &mut ContentManifestMetadata| { &mut m.unique_chunks },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "crc_encrypted",
            |m: &ContentManifestMetadata| { &m.crc_encrypted },
            |m: &mut ContentManifestMetadata| { &mut m.crc_encrypted },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "crc_clear",
            |m: &ContentManifestMetadata| { &m.crc_clear },
            |m: &mut ContentManifestMetadata| { &mut m.crc_clear },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ContentManifestMetadata>(
            "ContentManifestMetadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ContentManifestMetadata {
    const NAME: &'static str = "ContentManifestMetadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.depot_id = is.read_uint32()?;
                },
                16 => {
                    self.gid_manifest = is.read_uint64()?;
                },
                24 => {
                    self.creation_time = is.read_uint32()?;
                },
                32 => {
                    self.filenames_encrypted = is.read_bool()?;
                },
                40 => {
                    self.cb_disk_original = is.read_uint64()?;
                },
                48 => {
                    self.cb_disk_compressed = is.read_uint64()?;
                },
                56 => {
                    self.unique_chunks = is.read_uint32()?;
                },
                64 => {
                    self.crc_encrypted = is.read_uint32()?;
                },
                72 => {
                    self.crc_clear = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.depot_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.depot_id);
        }
        if self.gid_manifest != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.gid_manifest);
        }
        if self.creation_time != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.creation_time);
        }
        if self.filenames_encrypted != false {
            my_size += 1 + 1;
        }
        if self.cb_disk_original != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.cb_disk_original);
        }
        if self.cb_disk_compressed != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.cb_disk_compressed);
        }
        if self.unique_chunks != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.unique_chunks);
        }
        if self.crc_encrypted != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.crc_encrypted);
        }
        if self.crc_clear != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.crc_clear);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.depot_id != 0 {
            os.write_uint32(1, self.depot_id)?;
        }
        if self.gid_manifest != 0 {
            os.write_uint64(2, self.gid_manifest)?;
        }
        if self.creation_time != 0 {
            os.write_uint32(3, self.creation_time)?;
        }
        if self.filenames_encrypted != false {
            os.write_bool(4, self.filenames_encrypted)?;
        }
        if self.cb_disk_original != 0 {
            os.write_uint64(5, self.cb_disk_original)?;
        }
        if self.cb_disk_compressed != 0 {
            os.write_uint64(6, self.cb_disk_compressed)?;
        }
        if self.unique_chunks != 0 {
            os.write_uint32(7, self.unique_chunks)?;
        }
        if self.crc_encrypted != 0 {
            os.write_uint32(8, self.crc_encrypted)?;
        }
        if self.crc_clear != 0 {
            os.write_uint32(9, self.crc_clear)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ContentManifestMetadata {
        ContentManifestMetadata::new()
    }

    fn clear(&mut self) {
        self.depot_id = 0;
        self.gid_manifest = 0;
        self.creation_time = 0;
        self.filenames_encrypted = false;
        self.cb_disk_original = 0;
        self.cb_disk_compressed = 0;
        self.unique_chunks = 0;
        self.crc_encrypted = 0;
        self.crc_clear = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ContentManifestMetadata {
        static instance: ContentManifestMetadata = ContentManifestMetadata {
            depot_id: 0,
            gid_manifest: 0,
            creation_time: 0,
            filenames_encrypted: false,
            cb_disk_original: 0,
            cb_disk_compressed: 0,
            unique_chunks: 0,
            crc_encrypted: 0,
            crc_clear: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ContentManifestMetadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ContentManifestMetadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ContentManifestMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContentManifestMetadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:ContentManifestSignature)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ContentManifestSignature {
    // message fields
    // @@protoc_insertion_point(field:ContentManifestSignature.signature)
    pub signature: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:ContentManifestSignature.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ContentManifestSignature {
    fn default() -> &'a ContentManifestSignature {
        <ContentManifestSignature as ::protobuf::Message>::default_instance()
    }
}

impl ContentManifestSignature {
    pub fn new() -> ContentManifestSignature {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature",
            |m: &ContentManifestSignature| { &m.signature },
            |m: &mut ContentManifestSignature| { &mut m.signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ContentManifestSignature>(
            "ContentManifestSignature",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ContentManifestSignature {
    const NAME: &'static str = "ContentManifestSignature";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.signature = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.signature.is_empty() {
            os.write_bytes(1, &self.signature)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ContentManifestSignature {
        ContentManifestSignature::new()
    }

    fn clear(&mut self) {
        self.signature.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ContentManifestSignature {
        static instance: ContentManifestSignature = ContentManifestSignature {
            signature: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ContentManifestSignature {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ContentManifestSignature").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ContentManifestSignature {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContentManifestSignature {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:ContentDeltaChunks)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ContentDeltaChunks {
    // message fields
    // @@protoc_insertion_point(field:ContentDeltaChunks.depot_id)
    pub depot_id: u32,
    // @@protoc_insertion_point(field:ContentDeltaChunks.manifest_id_source)
    pub manifest_id_source: u32,
    // @@protoc_insertion_point(field:ContentDeltaChunks.manifest_id_target)
    pub manifest_id_target: u32,
    // @@protoc_insertion_point(field:ContentDeltaChunks.deltaChunks)
    pub deltaChunks: ::std::vec::Vec<content_delta_chunks::DeltaChunk>,
    // @@protoc_insertion_point(field:ContentDeltaChunks.chunk_data_location)
    pub chunk_data_location: ::protobuf::EnumOrUnknown<content_delta_chunks::EContentDeltaChunkDataLocation>,
    // special fields
    // @@protoc_insertion_point(special_field:ContentDeltaChunks.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ContentDeltaChunks {
    fn default() -> &'a ContentDeltaChunks {
        <ContentDeltaChunks as ::protobuf::Message>::default_instance()
    }
}

impl ContentDeltaChunks {
    pub fn new() -> ContentDeltaChunks {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "depot_id",
            |m: &ContentDeltaChunks| { &m.depot_id },
            |m: &mut ContentDeltaChunks| { &mut m.depot_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "manifest_id_source",
            |m: &ContentDeltaChunks| { &m.manifest_id_source },
            |m: &mut ContentDeltaChunks| { &mut m.manifest_id_source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "manifest_id_target",
            |m: &ContentDeltaChunks| { &m.manifest_id_target },
            |m: &mut ContentDeltaChunks| { &mut m.manifest_id_target },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "deltaChunks",
            |m: &ContentDeltaChunks| { &m.deltaChunks },
            |m: &mut ContentDeltaChunks| { &mut m.deltaChunks },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "chunk_data_location",
            |m: &ContentDeltaChunks| { &m.chunk_data_location },
            |m: &mut ContentDeltaChunks| { &mut m.chunk_data_location },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ContentDeltaChunks>(
            "ContentDeltaChunks",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ContentDeltaChunks {
    const NAME: &'static str = "ContentDeltaChunks";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.depot_id = is.read_uint32()?;
                },
                16 => {
                    self.manifest_id_source = is.read_uint32()?;
                },
                24 => {
                    self.manifest_id_target = is.read_uint32()?;
                },
                34 => {
                    self.deltaChunks.push(is.read_message()?);
                },
                40 => {
                    self.chunk_data_location = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.depot_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.depot_id);
        }
        if self.manifest_id_source != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.manifest_id_source);
        }
        if self.manifest_id_target != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.manifest_id_target);
        }
        for value in &self.deltaChunks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.chunk_data_location != ::protobuf::EnumOrUnknown::new(content_delta_chunks::EContentDeltaChunkDataLocation::k_EContentDeltaChunkDataLocationInProtobuf) {
            my_size += ::protobuf::rt::int32_size(5, self.chunk_data_location.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.depot_id != 0 {
            os.write_uint32(1, self.depot_id)?;
        }
        if self.manifest_id_source != 0 {
            os.write_uint32(2, self.manifest_id_source)?;
        }
        if self.manifest_id_target != 0 {
            os.write_uint32(3, self.manifest_id_target)?;
        }
        for v in &self.deltaChunks {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if self.chunk_data_location != ::protobuf::EnumOrUnknown::new(content_delta_chunks::EContentDeltaChunkDataLocation::k_EContentDeltaChunkDataLocationInProtobuf) {
            os.write_enum(5, ::protobuf::EnumOrUnknown::value(&self.chunk_data_location))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ContentDeltaChunks {
        ContentDeltaChunks::new()
    }

    fn clear(&mut self) {
        self.depot_id = 0;
        self.manifest_id_source = 0;
        self.manifest_id_target = 0;
        self.deltaChunks.clear();
        self.chunk_data_location = ::protobuf::EnumOrUnknown::new(content_delta_chunks::EContentDeltaChunkDataLocation::k_EContentDeltaChunkDataLocationInProtobuf);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ContentDeltaChunks {
        static instance: ContentDeltaChunks = ContentDeltaChunks {
            depot_id: 0,
            manifest_id_source: 0,
            manifest_id_target: 0,
            deltaChunks: ::std::vec::Vec::new(),
            chunk_data_location: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ContentDeltaChunks {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ContentDeltaChunks").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ContentDeltaChunks {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContentDeltaChunks {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ContentDeltaChunks`
pub mod content_delta_chunks {
    // @@protoc_insertion_point(message:ContentDeltaChunks.DeltaChunk)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct DeltaChunk {
        // message fields
        // @@protoc_insertion_point(field:ContentDeltaChunks.DeltaChunk.sha_source)
        pub sha_source: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:ContentDeltaChunks.DeltaChunk.sha_target)
        pub sha_target: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:ContentDeltaChunks.DeltaChunk.size_original)
        pub size_original: u32,
        // @@protoc_insertion_point(field:ContentDeltaChunks.DeltaChunk.patch_method)
        pub patch_method: u32,
        // @@protoc_insertion_point(field:ContentDeltaChunks.DeltaChunk.chunk)
        pub chunk: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:ContentDeltaChunks.DeltaChunk.size_delta)
        pub size_delta: u32,
        // special fields
        // @@protoc_insertion_point(special_field:ContentDeltaChunks.DeltaChunk.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a DeltaChunk {
        fn default() -> &'a DeltaChunk {
            <DeltaChunk as ::protobuf::Message>::default_instance()
        }
    }

    impl DeltaChunk {
        pub fn new() -> DeltaChunk {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(6);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "sha_source",
                |m: &DeltaChunk| { &m.sha_source },
                |m: &mut DeltaChunk| { &mut m.sha_source },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "sha_target",
                |m: &DeltaChunk| { &m.sha_target },
                |m: &mut DeltaChunk| { &mut m.sha_target },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "size_original",
                |m: &DeltaChunk| { &m.size_original },
                |m: &mut DeltaChunk| { &mut m.size_original },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "patch_method",
                |m: &DeltaChunk| { &m.patch_method },
                |m: &mut DeltaChunk| { &mut m.patch_method },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "chunk",
                |m: &DeltaChunk| { &m.chunk },
                |m: &mut DeltaChunk| { &mut m.chunk },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "size_delta",
                |m: &DeltaChunk| { &m.size_delta },
                |m: &mut DeltaChunk| { &mut m.size_delta },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeltaChunk>(
                "ContentDeltaChunks.DeltaChunk",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for DeltaChunk {
        const NAME: &'static str = "DeltaChunk";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.sha_source = is.read_bytes()?;
                    },
                    18 => {
                        self.sha_target = is.read_bytes()?;
                    },
                    24 => {
                        self.size_original = is.read_uint32()?;
                    },
                    32 => {
                        self.patch_method = is.read_uint32()?;
                    },
                    42 => {
                        self.chunk = is.read_bytes()?;
                    },
                    48 => {
                        self.size_delta = is.read_uint32()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.sha_source.is_empty() {
                my_size += ::protobuf::rt::bytes_size(1, &self.sha_source);
            }
            if !self.sha_target.is_empty() {
                my_size += ::protobuf::rt::bytes_size(2, &self.sha_target);
            }
            if self.size_original != 0 {
                my_size += ::protobuf::rt::uint32_size(3, self.size_original);
            }
            if self.patch_method != 0 {
                my_size += ::protobuf::rt::uint32_size(4, self.patch_method);
            }
            if !self.chunk.is_empty() {
                my_size += ::protobuf::rt::bytes_size(5, &self.chunk);
            }
            if self.size_delta != 0 {
                my_size += ::protobuf::rt::uint32_size(6, self.size_delta);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.sha_source.is_empty() {
                os.write_bytes(1, &self.sha_source)?;
            }
            if !self.sha_target.is_empty() {
                os.write_bytes(2, &self.sha_target)?;
            }
            if self.size_original != 0 {
                os.write_uint32(3, self.size_original)?;
            }
            if self.patch_method != 0 {
                os.write_uint32(4, self.patch_method)?;
            }
            if !self.chunk.is_empty() {
                os.write_bytes(5, &self.chunk)?;
            }
            if self.size_delta != 0 {
                os.write_uint32(6, self.size_delta)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> DeltaChunk {
            DeltaChunk::new()
        }

        fn clear(&mut self) {
            self.sha_source.clear();
            self.sha_target.clear();
            self.size_original = 0;
            self.patch_method = 0;
            self.chunk.clear();
            self.size_delta = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static DeltaChunk {
            static instance: DeltaChunk = DeltaChunk {
                sha_source: ::std::vec::Vec::new(),
                sha_target: ::std::vec::Vec::new(),
                size_original: 0,
                patch_method: 0,
                chunk: ::std::vec::Vec::new(),
                size_delta: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for DeltaChunk {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ContentDeltaChunks.DeltaChunk").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for DeltaChunk {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for DeltaChunk {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:ContentDeltaChunks.EContentDeltaChunkDataLocation)
    pub enum EContentDeltaChunkDataLocation {
        // @@protoc_insertion_point(enum_value:ContentDeltaChunks.EContentDeltaChunkDataLocation.k_EContentDeltaChunkDataLocationInProtobuf)
        k_EContentDeltaChunkDataLocationInProtobuf = 0,
        // @@protoc_insertion_point(enum_value:ContentDeltaChunks.EContentDeltaChunkDataLocation.k_EContentDeltaChunkDataLocationAfterProtobuf)
        k_EContentDeltaChunkDataLocationAfterProtobuf = 1,
    }

    impl ::protobuf::Enum for EContentDeltaChunkDataLocation {
        const NAME: &'static str = "EContentDeltaChunkDataLocation";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EContentDeltaChunkDataLocation> {
            match value {
                0 => ::std::option::Option::Some(EContentDeltaChunkDataLocation::k_EContentDeltaChunkDataLocationInProtobuf),
                1 => ::std::option::Option::Some(EContentDeltaChunkDataLocation::k_EContentDeltaChunkDataLocationAfterProtobuf),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EContentDeltaChunkDataLocation> {
            match str {
                "k_EContentDeltaChunkDataLocationInProtobuf" => ::std::option::Option::Some(EContentDeltaChunkDataLocation::k_EContentDeltaChunkDataLocationInProtobuf),
                "k_EContentDeltaChunkDataLocationAfterProtobuf" => ::std::option::Option::Some(EContentDeltaChunkDataLocation::k_EContentDeltaChunkDataLocationAfterProtobuf),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EContentDeltaChunkDataLocation] = &[
            EContentDeltaChunkDataLocation::k_EContentDeltaChunkDataLocationInProtobuf,
            EContentDeltaChunkDataLocation::k_EContentDeltaChunkDataLocationAfterProtobuf,
        ];
    }

    impl ::protobuf::EnumFull for EContentDeltaChunkDataLocation {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("ContentDeltaChunks.EContentDeltaChunkDataLocation").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for EContentDeltaChunkDataLocation {
        fn default() -> Self {
            EContentDeltaChunkDataLocation::k_EContentDeltaChunkDataLocationInProtobuf
        }
    }

    impl EContentDeltaChunkDataLocation {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EContentDeltaChunkDataLocation>("ContentDeltaChunks.EContentDeltaChunkDataLocation")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0emanifest.proto\"\xea\x03\n\x16ContentManifestPayload\x12?\n\x08map\
    pings\x18\x01\x20\x03(\x0b2#.ContentManifestPayload.FileMappingR\x08mapp\
    ings\x1a\x8e\x03\n\x0bFileMapping\x12\x1a\n\x08filename\x18\x01\x20\x01(\
    \tR\x08filename\x12\x12\n\x04size\x18\x02\x20\x01(\x04R\x04size\x12\x14\
    \n\x05flags\x18\x03\x20\x01(\rR\x05flags\x12!\n\x0csha_filename\x18\x04\
    \x20\x01(\x0cR\x0bshaFilename\x12\x1f\n\x0bsha_content\x18\x05\x20\x01(\
    \x0cR\nshaContent\x12E\n\x06chunks\x18\x06\x20\x03(\x0b2-.ContentManifes\
    tPayload.FileMapping.ChunkDataR\x06chunks\x12\x1e\n\nlinktarget\x18\x07\
    \x20\x01(\tR\nlinktarget\x1a\x8d\x01\n\tChunkData\x12\x10\n\x03sha\x18\
    \x01\x20\x01(\x0cR\x03sha\x12\x10\n\x03crc\x18\x02\x20\x01(\rR\x03crc\
    \x12\x16\n\x06offset\x18\x03\x20\x01(\x04R\x06offset\x12\x1f\n\x0bcb_ori\
    ginal\x18\x04\x20\x01(\rR\ncbOriginal\x12#\n\rcb_compressed\x18\x05\x20\
    \x01(\rR\x0ccbCompressed\"\xec\x02\n\x17ContentManifestMetadata\x12\x19\
    \n\x08depot_id\x18\x01\x20\x01(\rR\x07depotId\x12!\n\x0cgid_manifest\x18\
    \x02\x20\x01(\x04R\x0bgidManifest\x12#\n\rcreation_time\x18\x03\x20\x01(\
    \rR\x0ccreationTime\x12/\n\x13filenames_encrypted\x18\x04\x20\x01(\x08R\
    \x12filenamesEncrypted\x12(\n\x10cb_disk_original\x18\x05\x20\x01(\x04R\
    \x0ecbDiskOriginal\x12,\n\x12cb_disk_compressed\x18\x06\x20\x01(\x04R\
    \x10cbDiskCompressed\x12#\n\runique_chunks\x18\x07\x20\x01(\rR\x0cunique\
    Chunks\x12#\n\rcrc_encrypted\x18\x08\x20\x01(\rR\x0ccrcEncrypted\x12\x1b\
    \n\tcrc_clear\x18\t\x20\x01(\rR\x08crcClear\"8\n\x18ContentManifestSigna\
    ture\x12\x1c\n\tsignature\x18\x01\x20\x01(\x0cR\tsignature\"\x81\x05\n\
    \x12ContentDeltaChunks\x12\x19\n\x08depot_id\x18\x01\x20\x01(\rR\x07depo\
    tId\x12,\n\x12manifest_id_source\x18\x02\x20\x01(\rR\x10manifestIdSource\
    \x12,\n\x12manifest_id_target\x18\x03\x20\x01(\rR\x10manifestIdTarget\
    \x12@\n\x0bdeltaChunks\x18\x04\x20\x03(\x0b2\x1e.ContentDeltaChunks.Delt\
    aChunkR\x0bdeltaChunks\x12b\n\x13chunk_data_location\x18\x05\x20\x01(\
    \x0e22.ContentDeltaChunks.EContentDeltaChunkDataLocationR\x11chunkDataLo\
    cation\x1a\xc7\x01\n\nDeltaChunk\x12\x1d\n\nsha_source\x18\x01\x20\x01(\
    \x0cR\tshaSource\x12\x1d\n\nsha_target\x18\x02\x20\x01(\x0cR\tshaTarget\
    \x12#\n\rsize_original\x18\x03\x20\x01(\rR\x0csizeOriginal\x12!\n\x0cpat\
    ch_method\x18\x04\x20\x01(\rR\x0bpatchMethod\x12\x14\n\x05chunk\x18\x05\
    \x20\x01(\x0cR\x05chunk\x12\x1d\n\nsize_delta\x18\x06\x20\x01(\rR\tsizeD\
    elta\"\x83\x01\n\x1eEContentDeltaChunkDataLocation\x12.\n*k_EContentDelt\
    aChunkDataLocationInProtobuf\x10\0\x121\n-k_EContentDeltaChunkDataLocati\
    onAfterProtobuf\x10\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(ContentManifestPayload::generated_message_descriptor_data());
            messages.push(ContentManifestMetadata::generated_message_descriptor_data());
            messages.push(ContentManifestSignature::generated_message_descriptor_data());
            messages.push(ContentDeltaChunks::generated_message_descriptor_data());
            messages.push(content_manifest_payload::FileMapping::generated_message_descriptor_data());
            messages.push(content_manifest_payload::file_mapping::ChunkData::generated_message_descriptor_data());
            messages.push(content_delta_chunks::DeltaChunk::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(content_delta_chunks::EContentDeltaChunkDataLocation::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
